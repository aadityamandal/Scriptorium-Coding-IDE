generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model to represent application users
model User {
  id             Int             @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String          @unique
  password       String
  avatarUrl      String?
  phoneNumber    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isAdmin        Boolean         @default(false)  
  codeTemplates  CodeTemplate[]  @relation("UserCodeTemplates")
  blogPosts      BlogPost[]      @relation("UserBlogPosts")
  comments       Comment[]       @relation("UserComments")
  reports        Report[]        @relation("UserReports")
  postRatings    BlogPostRating[]
  commentRatings CommentRating[]
  refreshToken   String?        
}

// BlogPost model to represent user-created blog posts
model BlogPost {
  id            Int              @id @default(autoincrement())
  user          User             @relation("UserBlogPosts", fields: [userId], references: [id])
  userId        Int
  title         String      
  description   String
  content       String
  tags          Tags[]           @relation("BlogPostTags")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  comments      Comment[]        @relation("BlogPostComments")
  codeTemplates CodeTemplate[]   @relation("BlogPostCodeTemplates")
  ratings       BlogPostRating[] @relation("BlogPostRatings")
  isDeleted     Boolean          @default(false) // Soft delete flag
  totalRating   Int              @default(0)     // Field to track the total rating
  totalReports  Int              @default(0)
  isHidden      Boolean          @default(false) // Field to indicate if content is hidden
}

// Comment model to represent user comments on blog posts
model Comment {
  id             Int              @id @default(autoincrement())
  blogPost       BlogPost         @relation("BlogPostComments", fields: [blogPostId], references: [id], onDelete: Cascade) // Cascade delete comments when blog post is deleted
  blogPostId     Int
  user           User             @relation("UserComments", fields: [userId], references: [id])
  userId         Int
  content        String
  parentId       Int?             // Optional parent comment ID for replies
  parent         Comment?         @relation("CommentReplies", fields: [parentId], references: [id])
  replies        Comment[]        @relation("CommentReplies")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ratings        CommentRating[]  @relation("CommentRatings")
  totalRating    Int              @default(0) // Field for storing the total rating
  totalReports   Int              @default(0)
  isDeleted      Boolean          @default(false)
  isHidden       Boolean          @default(false) // Field to indicate if content is hidden
}



// CodeTemplate model to represent user-created code snippets
model CodeTemplate {
  id           Int            @id @default(autoincrement())
  user         User           @relation("UserCodeTemplates", fields: [userId], references: [id])
  userId       Int
  title        String
  language     String
  description  String?
  tags         Tags[]         @relation("CodeTemplateTags")
  code         String
  isForked     Boolean        @default(false)
  forkedFrom   CodeTemplate?  @relation("ForkedTemplates", fields: [forkedFromId], references: [id])
  forkedFromId Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  blogs        BlogPost[]     @relation("BlogPostCodeTemplates")

  forks        CodeTemplate[] @relation("ForkedTemplates")

  @@unique([userId, title]) // Ensures unique title per user for each code template
}

// Report model to track reports against blog posts and comments
model Report {
  id          Int       @id @default(autoincrement())
  user        User      @relation("UserReports", fields: [userId], references: [id])
  userId      Int
  contentType String
  contentId   Int       // References either BlogPost or Comment ID based on contentType
  reason      String?
  createdAt   DateTime  @default(now())
}

// BlogPostRating model to track user ratings for blog posts
model BlogPostRating {
  id          Int       @id @default(autoincrement())
  blogPost    BlogPost  @relation("BlogPostRatings", fields: [blogPostId], references: [id], onDelete: Cascade) // Cascade delete ratings when blog post is deleted
  blogPostId  Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  rating      Int       // -1 for downvote, 1 for upvote
  createdAt   DateTime  @default(now())

  @@unique([blogPostId, userId]) // Composite unique constraint
}

// CommentRating model to track user ratings for comments
model CommentRating {
  id          Int       @id @default(autoincrement())
  comment     Comment   @relation("CommentRatings", fields: [commentId], references: [id], onDelete: Cascade) // Cascade delete ratings when comment is deleted
  commentId   Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  rating      Int       // -1 for downvote, 1 for upvote
  createdAt   DateTime  @default(now())

  @@unique([commentId, userId]) // Composite unique constraint
}

// Tags model to represent tags used in blog posts and code templates
model Tags {
  id           Int            @id @default(autoincrement())
  tag          String         @unique
  blogPosts    BlogPost[]     @relation("BlogPostTags")

  CodeTemplate CodeTemplate[] @relation("CodeTemplateTags")
}
